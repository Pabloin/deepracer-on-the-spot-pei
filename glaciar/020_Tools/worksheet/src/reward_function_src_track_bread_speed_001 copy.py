# Source URL: https://github.com/dp770/aws_deepracer_worksheet/blob/main/src/reward_function.py

# Raceline: 2022_june_open_ccw-1500-8-2023-12-24-034238
# Name:  reward_function_track_bread_speed_001


import math
import numpy as np

# constants
MIN_SPEED = 2.1                     # Model specific. Critical to keep in sync with model's actions space
MAX_SPEED = 4.0                     # Model specific. Critical to keep in sync with model's actions space
MAX_STEERING = 30.0                 # Model specific. Critical to keep in sync with model's actions space
MAX_DIRECTION_DIFF = 30.0
MAX_STEPS_TO_DECAY_PENALTY = 0      # Value of zero or below disables penalty for having wheels off track
MAX_STEPS_TO_PROGRESS_RATIO = 1.8   # Desired maximum number of steps to be taken for 1% of progress
RACING_LINE_SMOOTHING_STEPS = 1     # Track specific. Critical to keep in sync with optimal racing line
RACING_LINE_WIDTH_FREE_ZONE = 0.10  # Percentage of racing line width for 100% of "being on track" reward
RACING_LINE_WIDTH_SAFE_ZONE = 0.25  # Percentage of racing line width for distance relative "being on track" reward
RACING_LINE_VS_CENTRAL_LINE = 0.85  # Number in range of [0, 1]. Zero forces to follow central line, 1 - racing line
SENSITIVITY_EXP_CNT_DISTANCE = 3.00  # Higher number gives more freedom on the track, can cause zig-zags
SENSITIVITY_EXP_ACTION_SPEED = 3.00  # Higher number increases penalty for low speed
SENSITIVITY_EXP_ACTION_STEER = 0.70  # Higher number decreases penalty for high steering
SENSITIVITY_EXP_DIR_STEERING = 2.00  # Lower number accelerates penalty increase for not following track direction
TOTAL_PENALTY_ON_OFF_TRACK = 0.999999  # Maximum penalty in percentage of total reward for being off track
TOTAL_PENALTY_ON_BAD_SPEED = 0.500000  # Maximum penalty in percentage of total reward for being off track
TOTAL_PENALTY_ON_OFF_DIR_STEER = 0.35  # Maximum penalty in percentage of total reward for off directional steering
REWARD_WEIGHT_PROG_STEP = 35
REWARD_WEIGHT_EXP_SPEED = 25
REWARD_WEIGHT_DIR_STEER = 20
REWARD_WEIGHT_ON_TRACK = 15
MAX_TOTAL_REWARD = REWARD_WEIGHT_ON_TRACK + REWARD_WEIGHT_PROG_STEP + REWARD_WEIGHT_DIR_STEER + REWARD_WEIGHT_EXP_SPEED

# static

track_smoothed = np.array([[ 2.16828134,  2.21892651],
       [ 2.04689848,  2.17238402],
       [ 1.92552027,  2.12582943],
       [ 1.76541603,  2.06442147],
       [ 1.48393351,  1.95645797],
       [ 1.20244902,  1.84850049],
       [ 0.92096415,  1.74054503],
       [ 0.63947915,  1.63258952],
       [ 0.35799369,  1.52463502],
       [ 0.07650754,  1.41668251],
       [-0.20497798,  1.3087281 ],
       [-0.48646125,  1.20076805],
       [-0.76794818,  1.09281757],
       [-1.04944903,  0.98490234],
       [-1.33094001,  0.87696135],
       [-1.61194727,  0.77210868],
       [-1.8908527 ,  0.68049174],
       [-2.16537828,  0.61077077],
       [-2.43291575,  0.5693215 ],
       [-2.6908004 ,  0.56023331],
       [-2.9363418 ,  0.58600163],
       [-3.166501  ,  0.64862924],
       [-3.37740431,  0.75031829],
       [-3.56292843,  0.8946988 ],
       [-3.72460536,  1.07285234],
       [-3.86536675,  1.27730761],
       [-3.9899945 ,  1.50053344],
       [-4.105111  ,  1.73434347],
       [-4.23639434,  1.96260524],
       [-4.38318498,  2.16937199],
       [-4.54718641,  2.34872102],
       [-4.72840017,  2.49563264],
       [-4.92548618,  2.60535774],
       [-5.13661547,  2.66786482],
       [-5.35487597,  2.68668542],
       [-5.57520147,  2.66409745],
       [-5.79330404,  2.60155472],
       [-6.00513661,  2.49995112],
       [-6.2065774 ,  2.36000931],
       [-6.39328539,  2.18274316],
       [-6.56079175,  1.97008564],
       [-6.704788  ,  1.72546123],
       [-6.82161001,  1.45441406],
       [-6.9089725 ,  1.16604853],
       [-6.96399586,  0.87479493],
       [-6.98806618,  0.5862607 ],
       [-6.9834405 ,  0.30249471],
       [-6.95202747,  0.0247616 ],
       [-6.89522234, -0.24594393],
       [-6.81403745, -0.50869613],
       [-6.70917549, -0.76251139],
       [-6.58110977, -1.00623731],
       [-6.43020181, -1.23843335],
       [-6.25706064, -1.45736381],
       [-6.06258554, -1.6608309 ],
       [-5.84847721, -1.84643332],
       [-5.61723692, -2.01180917],
       [-5.37203425, -2.15514537],
       [-5.11616917, -2.2753849 ],
       [-4.85263637, -2.37225538],
       [-4.58387811, -2.44610937],
       [-4.31173845, -2.4977187 ],
       [-4.03752274, -2.52785274],
       [-3.76215231, -2.53719673],
       [-3.48628759, -2.52626152],
       [-3.21039693, -2.49718149],
       [-2.93476693, -2.45136339],
       [-2.65959336, -2.39014097],
       [-2.385011  , -2.31480861],
       [-2.11110896, -2.22665974],
       [-1.83793251, -2.12709058],
       [-1.56548708, -2.01757005],
       [-1.29373736, -1.89966612],
       [-1.02259713, -1.7751397 ],
       [-0.75193665, -1.64583113],
       [-0.48158221, -1.51367003],
       [-0.21125579, -1.38247238],
       [ 0.05941122, -1.25889416],
       [ 0.33019669, -1.14924932],
       [ 0.60017471, -1.05919939],
       [ 0.86780877, -0.99334849],
       [ 1.13110274, -0.95521398],
       [ 1.38772372, -0.94732217],
       [ 1.63503886, -0.97149153],
       [ 1.87003784, -1.02915468],
       [ 2.08910865, -1.12167684],
       [ 2.28755336, -1.25069536],
       [ 2.45648523, -1.42078704],
       [ 2.60236877, -1.61750834],
       [ 2.73541152, -1.82797992],
       [ 2.87887003, -2.03954146],
       [ 3.03186615, -2.24207857],
       [ 3.19732761, -2.43207169],
       [ 3.37783575, -2.60575656],
       [ 3.58067017, -2.75177085],
       [ 3.8026104 , -2.8691698 ],
       [ 4.04055793, -2.95693983],
       [ 4.29130994, -3.01383828],
       [ 4.55128114, -3.03870732],
       [ 4.81645091, -3.03068964],
       [ 5.08242381, -2.98942925],
       [ 5.34461469, -2.91531546],
       [ 5.59854552, -2.80953674],
       [ 5.84014006, -2.67398557],
       [ 6.06594796, -2.51107957],
       [ 6.27335313, -2.32364208],
       [ 6.46056015, -2.1145811 ],
       [ 6.62642916, -1.88664747],
       [ 6.77032044, -1.64235873],
       [ 6.89190547, -1.38396144],
       [ 6.99102545, -1.11347454],
       [ 7.06760874, -0.83277897],
       [ 7.12154199, -0.54370235],
       [ 7.15282634, -0.24822893],
       [ 7.16157472,  0.05133401],
       [ 7.14814057,  0.35211089],
       [ 7.11332909,  0.65114071],
       [ 7.0568198 ,  0.94511072],
       [ 6.97774506,  1.22962613],
       [ 6.87614858,  1.50060368],
       [ 6.7526832 ,  1.75475949],
       [ 6.60830231,  1.98948059],
       [ 6.4441169 ,  2.20264051],
       [ 6.26124795,  2.39234099],
       [ 6.06080098,  2.55673693],
       [ 5.84373361,  2.69360999],
       [ 5.6110312 ,  2.80024732],
       [ 5.36448345,  2.87482741],
       [ 5.10767829,  2.92076923],
       [ 4.84280697,  2.93969738],
       [ 4.57172212,  2.93327781],
       [ 4.29605045,  2.90339902],
       [ 4.01722553,  2.85227832],
       [ 3.73648746,  2.78259572],
       [ 3.45484122,  2.69754923],
       [ 3.17299694,  2.60080943],
       [ 2.89132202,  2.49634355],
       [ 2.60988247,  2.38825047],
       [ 2.32839048,  2.28031802],
       [ 2.16828134,  2.21892651]])

# track_smoothed = [[-5.506197741993031, 3.796951874456815], [-5.586890452532889, 3.6838441932505317], [-5.661316907436702, 3.575283136325027], [-5.738325196345029, 3.460177998976417], [-5.809491711396412, 3.349661595323988], [-5.882745377645373, 3.2328111547417757], [-5.950493955540974, 3.120450525034865], [-6.020503411639183, 3.0022309021223514], [-6.0858025746201605, 2.8883471309402555], [-6.152139091322866, 2.768855394824814], [-6.214029868327836, 2.653360379808813], [-6.279456289572886, 2.533443425145653], [-6.340543404844078, 2.4169700530672835], [-6.401696943197853, 2.295876757640661], [-6.457801325803878, 2.1776210925350417], [-6.521082192973191, 2.0574115208609483], [-6.584256333431521, 1.9399201664767696], [-6.6373601302202525, 1.8171173020356859], [-6.687629920019666, 1.696040868993072], [-6.71811796774529, 1.5713777763843517], [-6.73761288663927, 1.4486040332486558], [-6.750836381532919, 1.3241393138790405], [-6.74851447928167, 1.2023575627980456], [-6.7359685243376095, 1.0808580406599786], [-6.720085776078255, 0.9607171999854573], [-6.678277555314872, 0.8472120750461101], [-6.633468215571389, 0.7354414672676611], [-6.5798366499753795, 0.626892108118963], [-6.512829771504692, 0.5252981922572123], [-6.441553579900576, 0.42648195536607025], [-6.36172662547955, 0.3333984447119427], [-6.267941837357577, 0.2510463443798738], [-6.179680357787715, 0.16381502632306735], [-6.075941697033321, 0.09151605877892029], [-5.9707780120286404, 0.021951345006636074], [-5.861776297192317, -0.043718845684932936], [-5.753776257395106, -0.10972708104073065], [-5.635848517708186, -0.163617000129085], [-5.518840857519494, -0.21554835306918912], [-5.398196373441423, -0.2641366561645747], [-5.2841788556121, -0.31901602182051175], [-5.164273963734949, -0.3688386730083501], [-5.049510555983929, -0.42325437565714163], [-4.929625066739977, -0.47356915006656053], [-4.8142217239481235, -0.5291475079643194], [-4.6915612085975775, -0.570788534125985], [-4.571911770927963, -0.6108538393053744], [-4.448346208726873, -0.6494051071048509], [-4.324901237396064, -0.6719395907453751], [-4.197690876202779, -0.6928312291748008], [-4.0745077113252295, -0.6890364887956002], [-3.948257411876052, -0.6870111856794474], [-3.825115358243199, -0.7011778926011141], [-3.6968788405138975, -0.7064014892293466], [-3.573401224548317, -0.7135298881083377], [-3.4448605839085324, -0.7151671746209798], [-3.32110109726544, -0.7225910310225317], [-3.191508110047352, -0.7276430413797141], [-3.0674243630690894, -0.7310547299724623], [-2.937129224870249, -0.7353154673678747], [-2.812511068072324, -0.7396536566521128], [-2.681855467010973, -0.7451497050897357], [-2.557069962376877, -0.7437651036427894], [-2.4252775098402655, -0.7484920940174533], [-2.299571433608624, -0.7545767797348326], [-2.1683314015715336, -0.7643591232017641], [-2.0433233442163106, -0.7469871168940997], [-1.9092356153029706, -0.7525448328141211], [-1.7819587395022491, -0.7769570684937956], [-1.6513881543429116, -0.8184191039504873], [-1.5323669055306843, -0.8881456111686361], [-1.4002023028517367, -0.9140145650277488], [-1.2750220398094219, -0.9569563708296823], [-1.1436074924824784, -0.9932514456274082], [-1.0195730360065733, -1.047131053474927], [-0.8875451293853283, -1.0805789442089158], [-0.7606681393941374, -1.1253051613979141], [-0.628417897295047, -1.1614306452259098], [-0.5006646600357325, -1.2073440765311862], [-0.3676919253445554, -1.2423010702670108], [-0.23803212049485348, -1.2842102949197851], [-0.10435686112146027, -1.3191543615708554], [0.02671171655265915, -1.3594408256475663], [0.1612906437587346, -1.3930251711933024], [0.2940031671469526, -1.4301981344115229], [0.4295221480946082, -1.4623316238020285], [0.5637001443037049, -1.496790360481471], [0.7002168720423967, -1.526774400096273], [0.8358402533751771, -1.557947110719287], [0.9733342283655022, -1.5854147986280998], [1.1102507348037374, -1.6131990714772675], [1.2486686841980716, -1.6376653067863423], [1.386737583205403, -1.6617285529502746], [1.5259696318203853, -1.682823555204505], [1.6649899111032782, -1.7029630695097753], [1.8048834417610276, -1.7203258722362922], [1.9446322984845175, -1.7363012973536058], [2.0849898238825695, -1.7496368594803677], [2.2252094811782914, -1.7612630706691748], [2.365800254852657, -1.7703198491305092], [2.5062124759659272, -1.7774278643874781], [2.6467772968558507, -1.782008470535896], [2.787093456364718, -1.7844808684937932], [2.9273663697083796, -1.7844509967962094], [3.0672900981400257, -1.7822011469347023], [3.207000320577225, -1.7774807438005518], [3.3462729322523685, -1.770516155789029], [3.485189209334412, -1.7611218207196393], [3.6235362754888616, -1.749445353098235], [3.7614610277746463, -1.7354765652863595], [3.898768499641509, -1.7193388665383587], [4.0355719530189145, -1.7009853894527327], [4.171564362918606, -1.6803854756083207], [4.307322149027139, -1.6581899819515755], [4.442305818926352, -1.6339678631910286], [4.576766425632862, -1.6078614774533788], [4.710126727627626, -1.5794593381837283], [4.844614844138436, -1.5519965567402756], [4.977928898370553, -1.5220138700642027], [5.109795410824503, -1.489161094912422], [5.2454396613788115, -1.4624563924444727], [5.3751488565940715, -1.4250766982112724], [5.511669204915749, -1.3977103249777552], [5.636869278217899, -1.3528202844988546], [5.76148164335832, -1.3071629088930312], [5.888412895378842, -1.2637433890534564], [6.004642185740679, -1.2069286351504096], [6.111477878540892, -1.1392817849318586], [6.213044504863869, -1.0672463026116352], [6.3110099254361, -0.9903055872381727], [6.390111166880696, -0.8992778458723921], [6.4595093795268035, -0.8016608441584022], [6.520346959570234, -0.6994962410475237], [6.574574321444409, -0.593454636316254], [6.610243951233969, -0.48031658372678887], [6.648736086129437, -0.36788413789172836], [6.6674765727995915, -0.250613900430766], [6.690367105859827, -0.1343064065896491], [6.7061483769684145, -0.01734666816217666], [6.716246461381111, 0.10113660938457579], [6.717403911928636, 0.21812243988332794], [6.718474583474171, 0.3361052109007953], [6.7185957079072205, 0.45431790297400326], [6.694303270789097, 0.5677355567257509], [6.671459605339049, 0.6816812758050622], [6.636095916239149, 0.7910618418174218], [6.588556325207209, 0.8959290975135146], [6.528220979182585, 0.9933708503855114], [6.456663051354732, 1.0846882578548744], [6.372150218758514, 1.1654558731529465], [6.2819130330526685, 1.2405629477552416], [6.182819891688279, 1.3073798996714945], [6.0773594364284875, 1.3661276415709054], [5.965357097300048, 1.4197418297684963], [5.846093355964237, 1.461872180379056], [5.716315800457194, 1.4872326973993422], [5.581917576858981, 1.5005039638412812], [5.4579971657120065, 1.5354004051452026], [5.3300054478804535, 1.5635899391543322], [5.2024755689430995, 1.5938698800212923], [5.0711046507180395, 1.616934817259781], [4.943594400063285, 1.6481481991764921], [4.813021115372025, 1.6749689634546066], [4.684339568524912, 1.7058645058510038], [4.5525713236861405, 1.732304598619712], [4.423303637952705, 1.7637192342802264], [4.291454444235948, 1.7921253859955428], [4.1614388570950975, 1.8240155080240432], [4.0291630567296535, 1.853584368823283], [3.8987107037549187, 1.8864458451182675], [3.766474863632014, 1.9180452161429802], [3.635655491305833, 1.9519051051305392], [3.5035047569319566, 1.9854439643947954], [3.3727601751678233, 2.021090960794898], [3.2411780794322484, 2.0573712872161827], [3.110198807342301, 2.0935517550880305], [2.9791336182837016, 2.1322166180728344], [2.8490580533341925, 2.1715631508419055], [2.7196000187536282, 2.2146507115568377], [2.5880167155693505, 2.2500335582759297], [2.458640561955459, 2.294055129867765], [2.3306906872687323, 2.339115411523753], [2.2023060520914988, 2.3834645691879066], [2.0699974048368843, 2.415975580869505], [1.941437260581924, 2.4627843602996307], [1.820758256343342, 2.5259999423269903], [1.703266011383937, 2.5965884302605624], [1.5882463023810325, 2.667511130520577], [1.4681539113985131, 2.730370341562922], [1.350803500487891, 2.797965613146429], [1.2356678068229179, 2.8696769189349265], [1.119079996507991, 2.9386059059708236], [1.0038149862041599, 3.009154205407862], [0.8888676122384105, 3.0807189077816153], [0.7774249344599972, 3.1562654642575003], [0.6601123799944488, 3.226463057283206], [0.5481656445913912, 3.3019459103729485], [0.43622189048746, 3.3787540197877233], [0.32929786532957916, 3.459461676791852], [0.20896960647828, 3.5281460441222574], [0.0902167023644018, 3.599123303893298], [-0.010806976744754145, 3.6888997070086376], [-0.09488342784853986, 3.79151774749596], [-0.15430490512516662, 3.9102442165804763], [-0.20890558228109687, 4.0293854039321175], [-0.2911475062318136, 4.132105972037738], [-0.3598469749371877, 4.243681543748505], [-0.43237482980563197, 4.352923952456958], [-0.4935917228552263, 4.468670625400689], [-0.5694633150169527, 4.575223486586263], [-0.63484323449984, 4.688393232128265], [-0.7082240247763323, 4.795995939300611], [-0.7702217171834089, 4.911225428493409], [-0.8437569882157312, 5.018297138739587], [-0.9079234007546335, 5.131383448771395], [-0.9820762722251104, 5.236764018193471], [-1.0409133745172883, 5.353939900488642], [-1.113038664648561, 5.4611443606099455], [-1.178771936508163, 5.571225647997492], [-1.2560566032148388, 5.6720531170355875], [-1.3071944707456822, 5.794605778360664], [-1.3729529609130173, 5.908246833672602], [-1.4480585430574084, 6.009242615003618], [-1.537839515471902, 6.095697800818326], [-1.6359149960330663, 6.161526035263434], [-1.7336502343313462, 6.23044200003853], [-1.8369452364970318, 6.287987200688819], [-1.9453949651327318, 6.3353264418366155], [-2.0573895892404543, 6.369061126734067], [-2.1718234444996134, 6.3935794994884425], [-2.287271274821061, 6.410577977763291], [-2.405399465729793, 6.414192523421194], [-2.5241074637540963, 6.407504889299563], [-2.6426577952545176, 6.377203985316119], [-2.758561036827394, 6.338150918619598], [-2.8741329950632966, 6.287513421699398], [-2.9871213625764836, 6.226998897462645], [-3.0972922217569514, 6.15205047276865], [-3.2024989557398453, 6.068337170985398], [-3.3064027518098618, 5.9755555482568035], [-3.4132599519467925, 5.899678148732999], [-3.5201928666008264, 5.8159264499242145], [-3.623739476980315, 5.731868617241712], [-3.728778575236144, 5.643911952976409], [-3.8316777006787044, 5.5609535481308505], [-3.9362461929044716, 5.472823971276412], [-4.036832438655474, 5.385929972509725], [-4.139784124700942, 5.295098382165476], [-4.238521767386162, 5.206477129553702], [-4.339826439571174, 5.113242642342914], [-4.436149559421873, 5.021714923822978], [-4.535305628990496, 4.925377679266801], [-4.629134782777925, 4.831458254379453], [-4.725890632886171, 4.732042920343973], [-4.816899285293714, 4.635434388124448], [-4.910932243743826, 4.532904048813507], [-4.998928415512038, 4.433758932837456], [-5.089968270965747, 4.328257613920089], [-5.174740820364901, 4.226570048893011], [-5.262533797680332, 4.118287622437238], [-5.34392173670645, 4.0141816484386466], [-5.428246980858184, 3.9033563728505407]]


# smoothed_central_line = None
smoothed_central_line = track_smoothed

was_off_track_at_step = -MAX_STEPS_TO_DECAY_PENALTY
previous_steps_reward = MAX_TOTAL_REWARD


# Range [-180:+180]
def calc_slope(prev_point, next_point):
    return math.degrees(math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0]))


# Range [0:180]
def calc_direction_diff(steering, heading, track_direction):
    # Calculate the difference between the track direction and the heading direction of the car
    direction_diff = steering + heading - track_direction
    if direction_diff > 180.0:
        direction_diff = direction_diff - 360.0
    if direction_diff < -180.0:
        direction_diff = direction_diff + 360.0
    return abs(direction_diff)


# Returns distance between two points in meters
def calc_distance(prev_point, next_point):
    delta_x = next_point[0] - prev_point[0]
    delta_y = next_point[1] - prev_point[1]
    return math.hypot(delta_x, delta_y)


def smooth_central_line(center_line, max_offset, pp=0.10, p=0.05, c=0.70, n=0.05, nn=0.10, iterations=72, skip_step=1):
    if max_offset < 0.0001:
        return center_line
    if skip_step < 1:
        skip_step = 1
    smoothed_line = center_line
    for i in range(0, iterations):
        smoothed_line = smooth_central_line_internal(center_line, max_offset, smoothed_line, pp, p, c, n, nn, skip_step)
    return smoothed_line


def smooth_central_line_internal(center_line, max_offset, smoothed_line, pp, p, c, n, nn, skip_step):
    length = len(center_line)
    new_line = [[0.0 for _ in range(2)] for _ in range(length)]
    for i in range(0, length):
        wpp = smoothed_line[(i - 2 * skip_step + length) % length]
        wp = smoothed_line[(i - skip_step + length) % length]
        wc = smoothed_line[i]
        wn = smoothed_line[(i + skip_step) % length]
        wnn = smoothed_line[(i + 2 * skip_step) % length]
        new_line[i][0] = pp * wpp[0] + p * wp[0] + c * wc[0] + n * wn[0] + nn * wnn[0]
        new_line[i][1] = pp * wpp[1] + p * wp[1] + c * wc[1] + n * wn[1] + nn * wnn[1]
        while calc_distance(new_line[i], center_line[i]) >= max_offset:
            new_line[i][0] = (0.98 * new_line[i][0]) + (0.02 * center_line[i][0])
            new_line[i][1] = (0.98 * new_line[i][1]) + (0.02 * center_line[i][1])
    return new_line


# Calculate distance between current point and closest point on line between prev_point and next_point
def calc_distance_from_line(curr_point, prev_point, next_point):
    distance_cp_to_pp = calc_distance(curr_point, prev_point)  # b
    distance_cp_to_np = calc_distance(curr_point, next_point)  # a
    distance_pp_to_np = calc_distance(prev_point, next_point)  # c
    # cos A = (b^2 + c^2 - a^2) / 2bc
    angle_pp = math.acos((distance_cp_to_pp * distance_cp_to_pp + distance_pp_to_np * distance_pp_to_np
                          - distance_cp_to_np * distance_cp_to_np) / (2 * distance_cp_to_pp * distance_pp_to_np))
    # b / sin(Pi/2) = d / sin(A)
    return distance_cp_to_pp * math.sin(angle_pp)


def ema(prev, new, period):
    k = 2.0 / (1.0 + period)
    return (new - prev) * k + prev


# Reward function expected by AWS DeepRacer API
def reward_function(params):
    track_width = params['track_width']
    waypoints = params['waypoints']
    # initialize central line
    global smoothed_central_line
    if smoothed_central_line is None:
        max_offset = track_width * RACING_LINE_VS_CENTRAL_LINE * 0.5
        smoothed_central_line = smooth_central_line(waypoints, max_offset, skip_step=RACING_LINE_SMOOTHING_STEPS)
        print("track_waypoints:", "track_width =", track_width,
              "\ntrack_original =", waypoints, "\ntrack_smoothed =", smoothed_central_line)

    # re-initialize was_off_track_at_step
    global was_off_track_at_step
    steps = params['steps']
    if steps < was_off_track_at_step:
        was_off_track_at_step = -MAX_STEPS_TO_DECAY_PENALTY
    if not params['all_wheels_on_track']:
        was_off_track_at_step = steps

    global previous_steps_reward
    if steps <= 2:
        previous_steps_reward = MAX_TOTAL_REWARD

    # Calculate penalty for wheels being or have recently been off track
    wheels_off_track_penalty = 1.0
    if MAX_STEPS_TO_DECAY_PENALTY > 0:
        wheels_off_track_penalty = min(steps - was_off_track_at_step, MAX_STEPS_TO_DECAY_PENALTY) / (
            1.0 * MAX_STEPS_TO_DECAY_PENALTY)

    # Reward on directional move to the next milestone
    wp_length = len(smoothed_central_line)
    wp_indices = params['closest_waypoints']
    curr_point = [params['x'], params['y']]
    prev_point = smoothed_central_line[wp_indices[0]]
    next_point_1 = smoothed_central_line[(wp_indices[1] + 1) % wp_length]
    next_point_2 = smoothed_central_line[(wp_indices[1] + 2) % wp_length]
    next_point_3 = smoothed_central_line[(wp_indices[1] + 3) % wp_length]
    track_direction_1 = calc_slope(prev_point, next_point_1)
    track_direction_2 = calc_slope(prev_point, next_point_2)
    track_direction_3 = calc_slope(prev_point, next_point_3)

    heading = params['heading']  # Range: -180:+180
    steering = params['steering_angle']  # Range: -30:30
    direction_diff_ratio = (
            0.20 * min((calc_direction_diff(steering, heading, track_direction_1) / MAX_DIRECTION_DIFF), 1.00) +
            0.30 * min((calc_direction_diff(steering, heading, track_direction_2) / MAX_DIRECTION_DIFF), 1.00) +
            0.50 * min((calc_direction_diff(steering, heading, track_direction_3) / MAX_DIRECTION_DIFF), 1.00))
    dir_steering_ratio = 1.0 - pow(direction_diff_ratio, SENSITIVITY_EXP_DIR_STEERING)
    reward_dir_steering = REWARD_WEIGHT_DIR_STEER * dir_steering_ratio

    # Reward on speed relevant to track's direction
    speed = params['speed']  # Range: 0.0:4.0
    expect_speed_ratio = 1.0 - min(abs(track_direction_1 - track_direction_3), MAX_DIRECTION_DIFF) / MAX_DIRECTION_DIFF
    actual_speed_ratio = max(min(speed - MIN_SPEED, 0), MAX_SPEED - MIN_SPEED) / (MAX_SPEED - MIN_SPEED)
    speed_ratio = 1.0 - abs(expect_speed_ratio - actual_speed_ratio)
    reward_exp_speed = REWARD_WEIGHT_EXP_SPEED * pow(speed_ratio, SENSITIVITY_EXP_ACTION_SPEED)

    # Reward on close distance to the racing line
    free_zone = track_width * RACING_LINE_WIDTH_FREE_ZONE * 0.5
    safe_zone = track_width * RACING_LINE_WIDTH_SAFE_ZONE * 0.5
    dislocation = calc_distance_from_line(curr_point, prev_point, next_point_1)
    on_track_ratio = 0.0
    if dislocation <= free_zone:
        on_track_ratio = 1.0
    elif dislocation <= safe_zone:
        on_track_ratio = 1.0 - pow(dislocation / safe_zone, SENSITIVITY_EXP_CNT_DISTANCE)
    reward_on_track = on_track_ratio * REWARD_WEIGHT_ON_TRACK

    # Reward on good progress per step
    progress = params['progress']
    reward_prog_step = REWARD_WEIGHT_PROG_STEP * min(1.0, MAX_STEPS_TO_PROGRESS_RATIO * (progress / steps))

    reward_total = reward_on_track + reward_exp_speed + reward_dir_steering + reward_prog_step
    reward_total -= reward_total * (1.0 - dir_steering_ratio) * TOTAL_PENALTY_ON_OFF_DIR_STEER
    reward_total -= reward_total * (1.0 - on_track_ratio) * TOTAL_PENALTY_ON_OFF_TRACK
    reward_total -= reward_total * (1.0 - speed_ratio) * TOTAL_PENALTY_ON_BAD_SPEED
    reward_total *= wheels_off_track_penalty

    print("rewards:" + (20 * "{:.4f}," + "{:.4f}").format(reward_total,
        wheels_off_track_penalty, reward_on_track, reward_exp_speed, reward_dir_steering, reward_prog_step,
        dislocation, track_direction_1, track_direction_2, track_direction_3, direction_diff_ratio,
        waypoints[wp_indices[0]][0], waypoints[wp_indices[0]][1], prev_point[0], prev_point[1],
        next_point_1[0], next_point_1[1], next_point_2[0], next_point_2[1], next_point_3[0], next_point_3[1]))

    previous_steps_reward = ema(previous_steps_reward, reward_total, 3)
    return float(0.0000001 + previous_steps_reward)
